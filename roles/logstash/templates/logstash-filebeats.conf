input {
  kafka {
    bootstrap_servers => "localhost:9092"
    topics => ["filebeats"]
    client_id => "logstash_filebeats"
    group_id => "logstash_filebeats"
    tags => ["filebeat"]
    codec => "json"
  }

  kafka {
    bootstrap_servers => "localhost:9092"
    topics => ["metricbeats"]
    client_id => "logstash_metricbeats"
    group_id => "logstash_metricbeats"
    tags => ["metricbeats"]
    codec => "json"
  }

  udp {
    port => 25826
    buffer_size => 1452
    codec => collectd {
      typesdb => [ '/usr/share/collectd/types.db']
     }
    tags => ["collectd"]
  }
}


filter {
  #
  # filebeats filter
  #

  if "filebeat" in [tags] {
    #json {
    #    source => "message"
    #    target => "message"
    #  }

      if [source] == "/var/log/messages" {
         mutate {
            add_field => {
              "mytype" => "syslog"
            }
         }
      }

      if [source] == "/var/log/audit/audit.log" {
         mutate {
            add_field => {
              "mytype" => "audit_log"
            }
         }
      }

      if [source] == "/var/log/kafka/controller.log" {
         mutate { add_field => { "mytype" => "kafka_controller_log" } }
         grok {
            match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
         }
      }

      if [source] == "/var/log/kafka/server.log" {
         mutate { add_field => { "mytype" => "kafka_server_log" } }
          grok {
            match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{LOGLEVEL:loglevel} \[%{DATA:class}\]\, %{GREEDYDATA:message}" }
          }
      }

      if [source] == "/var/log/zookeeper/zookeeper.log" {
         mutate { add_field => { "mytype" => "zookeeper_log" } }

      }

      if [source] == "/var/log/filebeat/filebeat" {
         mutate { add_field => { "mytype" => "filebeat_log" } }
         grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
        }
      }

      if [source] == "/var/log/metricbeat/metricbeat" {
         mutate { add_field => { "mytype" => "metricbeat_log" } }
         grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
        }
      }

      if [source] == "/var/log/elasticsearch/elkstack.log" {
         mutate { add_field => { "mytype" => "es_log" } }
         grok {
            match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{LOGLEVEL:loglevel}%{SPACE}\]\[%{DATA:class}\]%{SPACE}\[%{DATA:cluster_id}\]%{SPACE}%{GREEDYDATA:message}" }
        }
      }

  }
}

  output {

  #
  # filebeats output
  #

    if "filebeat" in [tags] and "_grokparsefailure" not in [tags] {

      file {
        path => "/var/log/logstash/logstash_filebeat_out.log"
        codec => rubydebug
      }

     file {
       path => "/var/log/logstash/custom_filebeat_out.log"
       codec => line { format => "[%{message[type]}][%{message[beat][hostname]}][%{message[source]}] %{message[message]}"}
     }

     elasticsearch {
        id => "filebeat"
        hosts => ["server1:9200","server2:9200","server3:9200"]
        index => "filebeat-%{+YYYY.MM.dd}"
        template => "/etc/filebeat/filebeat.template.json"
      }


    }

    #
    # collectd output
    #

    if "collectd" in [tags] {
      file {
        path => "/var/log/logstash/logstash_collectd_out.log"
        codec => rubydebug
      }
      elasticsearch {
         id => "collectd"
         hosts => ["server1:9200","server2:9200","server3:9200"]
         index => "collectd-%{+YYYY.MM.dd}"
       }

    }

    #
    # metricbeats output
    #
    if "metricbeats" in [tags] {

       file {
         path => "/var/log/logstash/logstash_metricbeats_out.log"
         codec => rubydebug
       }

       #file {
        # path => "/var/log/logstash/custom_metricbeat_out.log"
        # codec => line { format => "[%{type}][%{beat[hostname]}] %{message}"}
        # charset => "UTF-8"
       #}

       elasticsearch {
          id => "metricbeat"
          hosts => ["server1:9200","server2:9200","server3:9200"]
          index => "metricbeat-%{+YYYY.MM.dd}"
          template => "/etc/metricbeat/metricbeat.template.json"
        }

    }

    if "_grokparsefailure" in [tags] {
      file {
        path => "/var/log/logstash/grok_parse_failures.log"
        codec => rubydebug
      }

    }

  }
